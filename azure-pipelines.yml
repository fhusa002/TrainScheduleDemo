# ===============================================
# üöÜ TrainSchedule Automation Framework - CI/CD
# Author: Faraaz Husain
# Description:
# Azure DevOps pipeline for automated build,
# test execution, and reporting.
# ===============================================

trigger:
  branches:
    include:
      - main
      - master

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

steps:
# 1Ô∏è‚É£ Use the latest .NET SDK
- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    packageType: 'sdk'
    version: '9.0.x'

# 2Ô∏è‚É£ Restore dependencies
- script: dotnet restore
  displayName: 'Restore dependencies'

# 3Ô∏è‚É£ Build the solution
- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'Build solution'

# 4Ô∏è‚É£ Run unit & integration tests
- script: dotnet test --configuration $(buildConfiguration) --logger "trx;LogFileName=test_results.trx" --collect:"XPlat Code Coverage"
  displayName: 'Run automated tests with coverage'

# 5Ô∏è‚É£ Publish test results to Azure DevOps
- task: PublishTestResults@2
  displayName: 'Publish test results'
  inputs:
    testResultsFiles: '**/test_results.trx'
    testRunTitle: 'TrainSchedule Automated Tests'
    mergeTestResults: true
    failTaskOnFailedTests: true

# 6Ô∏è‚É£ Publish code coverage results
- task: PublishCodeCoverageResults@2
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/coverage'

# 7Ô∏è‚É£ (Optional) Upload build artifacts
- task: PublishBuildArtifacts@1
  displayName: 'Publish build artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'TrainSchedule_Build'
    publishLocation: 'Container'
